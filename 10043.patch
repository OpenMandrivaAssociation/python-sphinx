From 6a6a4b580014ddc4e1b27b6cf656755decc6fa8c Mon Sep 17 00:00:00 2001
From: Takeshi KOMIYA <i.tkomiya@gmail.com>
Date: Sun, 2 Jan 2022 00:27:07 +0900
Subject: [PATCH] i18n: meta strings are not translated with docutils-0.18

i18n feature for meta strings does not work if docutils-0.18 used.

Note: Since docutils-0.18, patch for meta directive is no longer
needed because it uses a picklable meta nodes; ``docutils.nodes.meta``.
---
 sphinx/addnodes.py           |  7 +++++++
 sphinx/directives/patches.py |  7 +++----
 sphinx/search/__init__.py    |  9 +++++----
 sphinx/transforms/i18n.py    |  7 ++++++-
 sphinx/util/nodes.py         | 11 +++++++++--
 5 files changed, 30 insertions(+), 11 deletions(-)

diff --git a/sphinx/addnodes.py b/sphinx/addnodes.py
index dc8fae0ba3..5b63d22f55 100644
--- a/sphinx/addnodes.py
+++ b/sphinx/addnodes.py
@@ -16,6 +16,13 @@
 if TYPE_CHECKING:
     from sphinx.application import Sphinx
 
+try:
+    from docutils.nodes import meta as docutils_meta  # type: ignore
+except ImportError:
+    # docutils-0.17 or older
+    from docutils.parsers.rst.directives.html import MetaBody
+    docutils_meta = MetaBody.meta
+
 
 class document(nodes.document):
     """The document root element patched by Sphinx.
diff --git a/sphinx/directives/patches.py b/sphinx/directives/patches.py
index f01423a88d..5308b28388 100644
--- a/sphinx/directives/patches.py
+++ b/sphinx/directives/patches.py
@@ -29,13 +29,10 @@
 from sphinx.util.typing import OptionSpec
 
 try:
-    from docutils.nodes import meta as meta_node  # type: ignore
     from docutils.parsers.rst.directives.misc import Meta as MetaBase  # type: ignore
 except ImportError:
     # docutils-0.17 or older
     from docutils.parsers.rst.directives.html import Meta as MetaBase
-    from docutils.parsers.rst.directives.html import MetaBody
-    meta_node = MetaBody.meta
 
 if TYPE_CHECKING:
     from sphinx.application import Sphinx
@@ -74,8 +71,10 @@ class Meta(MetaBase, SphinxDirective):
     def run(self) -> List[Node]:
         result = super().run()
         for node in result:
+            # for docutils-0.17 or older.  Since docutils-0.18, patching is no longer needed
+            # because it uses picklable node; ``docutils.nodes.meta``.
             if (isinstance(node, nodes.pending) and
-               isinstance(node.details['nodes'][0], meta_node)):
+               isinstance(node.details['nodes'][0], addnodes.docutils_meta)):
                 meta = node.details['nodes'][0]
                 meta.source = self.env.doc2path(self.env.docname)
                 meta.line = self.lineno
diff --git a/sphinx/search/__init__.py b/sphinx/search/__init__.py
index 16b9fb0ed1..28f3ea036e 100644
--- a/sphinx/search/__init__.py
+++ b/sphinx/search/__init__.py
@@ -15,7 +15,7 @@
 from typing import IO, Any, Dict, Iterable, List, Optional, Set, Tuple, Type
 
 from docutils import nodes
-from docutils.nodes import Node
+from docutils.nodes import Element, Node
 
 from sphinx import addnodes, package_dir
 from sphinx.environment import BuildEnvironment
@@ -193,8 +193,9 @@ def __init__(self, document: nodes.document, lang: SearchLanguage) -> None:
         self.found_title_words: List[str] = []
         self.lang = lang
 
-    def is_meta_keywords(self, node: addnodes.meta) -> bool:
-        if isinstance(node, addnodes.meta) and node.get('name') == 'keywords':
+    def is_meta_keywords(self, node: Element) -> bool:
+        if (isinstance(node, (addnodes.meta, addnodes.docutils_meta)) and
+                node.get('name') == 'keywords'):
             meta_lang = node.get('lang')
             if meta_lang is None:  # lang not specified
                 return True
@@ -220,7 +221,7 @@ def dispatch_visit(self, node: Node) -> None:
             self.found_words.extend(self.lang.split(node.astext()))
         elif isinstance(node, nodes.title):
             self.found_title_words.extend(self.lang.split(node.astext()))
-        elif isinstance(node, addnodes.meta) and self.is_meta_keywords(node):
+        elif isinstance(node, Element) and self.is_meta_keywords(node):
             keywords = node['content']
             keywords = [keyword.strip() for keyword in keywords.split(',')]
             self.found_words.extend(keywords)
diff --git a/sphinx/transforms/i18n.py b/sphinx/transforms/i18n.py
index cac69b74f7..6e75286f86 100644
--- a/sphinx/transforms/i18n.py
+++ b/sphinx/transforms/i18n.py
@@ -234,13 +234,18 @@ def apply(self, **kwargs: Any) -> None:
 
             # update translatable nodes
             if isinstance(node, addnodes.translatable):
-                node.apply_translated_message(msg, msgstr)
+                node.apply_translated_message(msg, msgstr)  # type: ignore
                 continue
 
             # update meta nodes
             if isinstance(node, nodes.pending) and is_pending_meta(node):
+                # docutils-0.17 or older
                 node.details['nodes'][0]['content'] = msgstr
                 continue
+            elif isinstance(node, addnodes.docutils_meta):
+                # docutils-0.18+
+                node['content'] = msgstr
+                continue
 
             if isinstance(node, nodes.image) and node.get('alt') == msg:
                 node['alt'] = msgstr
diff --git a/sphinx/util/nodes.py b/sphinx/util/nodes.py
index 27a21af4bc..b6542f1d36 100644
--- a/sphinx/util/nodes.py
+++ b/sphinx/util/nodes.py
@@ -233,9 +233,11 @@ def is_translatable(node: Node) -> bool:
             return False
         return True
 
-    if isinstance(node, addnodes.meta):
+    if is_pending_meta(node) or isinstance(node, addnodes.meta):
+        # docutils-0.17 or older
         return True
-    if is_pending_meta(node):
+    elif isinstance(node, addnodes.docutils_meta):
+        # docutils-0.18+
         return True
 
     return False
@@ -274,9 +276,14 @@ def extract_messages(doctree: Element) -> Iterable[Tuple[Element, str]]:
             else:
                 msg = ''
         elif isinstance(node, META_TYPE_NODES):
+            # docutils-0.17 or older
             msg = node.rawcontent
         elif isinstance(node, nodes.pending) and is_pending_meta(node):
+            # docutils-0.17 or older
             msg = node.details['nodes'][0].rawcontent
+        elif isinstance(node, addnodes.docutils_meta):
+            # docutils-0.18+
+            msg = node["content"]
         else:
             msg = node.rawsource.replace('\n', ' ').strip()
 
